#version 400 compatibility

uniform int patch_size;

layout( triangles, equal_spacing, ccw ) in;

in TCS_OUT
{
    vec4 position;
    vec4 color;
    ivec4 data_comp; // Raconte si vdata1,2,3 ou 4 est utilise
    vec4 vdata1, vdata2, vdata3, vdata4;    
} tcs_in[];


out V2F_OUT
{
    vec4 position;
    vec4 mv_position;
    vec4 mvp_position;
    vec4 view_normal;
    vec4 nrm_view_normal;
    vec4 color;
    vec4 vdata1, vdata2, vdata3, vdata4;
} v2f_out;

void main()
{
    if (patch_size != 6) return;
    vec3 p0 = gl_in[0].gl_Position.xyz;
    vec3 p1 = gl_in[1].gl_Position.xyz;
    vec3 p2 = gl_in[2].gl_Position.xyz;
    vec3 p3 = gl_in[3].gl_Position.xyz;
    // Inversion gmsh par rapport a mon document...
    vec3 p4 = gl_in[5].gl_Position.xyz;
    vec3 p5 = gl_in[4].gl_Position.xyz;

    vec3 a00 = p0;
    vec3 a10 = -3. * p0 - p1 + 4. * p3;
    vec3 a01 = -3. * p0 - p2 + 4. * p4;
    vec3 a11 =  4. * p0 - 4. * p3 - 4. * p4 + 4. * p5;
    vec3 a20 =  2. * p0 + 2. * p1 - 4. * p3;
    vec3 a02 =  2. * p0 + 2. * p2 - 4. * p4;

    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    float w = gl_TessCoord.z;

    // vertex en coordonnees modele...
    vec4 xyz = vec4(a00 + u*a10 + v*a01 + u*v*a11 + u*u*a20 + v*v*a02,1);
    float nx = ( a10.y + a11.y*v + 2*a20.y*u ) * ( a01.z + a11.z*u + 2*a02.z*v ) -
                ( a01.y + a11.y*u + 2*a02.y*v ) * ( a10.z + a11.z*v + 2*a20.z*u );
    float ny = ( a10.z + a11.z*v + 2*a20.z*u ) * ( a01.x + a11.x*u + 2*a02.x*v ) -
                ( a01.z + a11.z*u + 2*a02.z*v ) * ( a10.x + a11.x*v + 2*a20.x*u );
    float nz = ( a10.x + a11.x*v + 2*a20.x*u ) * ( a01.y + a11.y*u + 2*a02.y*v ) -
                ( a01.x + a11.x*u + 2*a02.x*v ) * ( a10.y + a11.y*v + 2*a20.y*u );
    /*float nx = 0.;
    float ny = 0.;
    float nz = 1.;
*/
    v2f_out.position    = xyz;
    v2f_out.mv_position = gl_ModelViewMatrix * xyz;
    v2f_out.mvp_position = gl_ModelViewProjectionMatrix * xyz;
    v2f_out.view_normal = vec4(gl_NormalMatrix * vec3(nx, ny, nz), 0.);
    v2f_out.nrm_view_normal = normalize(v2f_out.view_normal);
    // Pour la couleur, sans doute a changer, il faut voir quel est la fonction de forme associee
    // Ce sera surement une fonction dans un fichier a rajouter au programme de tesselation shader
    vec4  c0 = tcs_in[0].color;
    vec4  c1 = tcs_in[1].color;
    vec4  c2 = tcs_in[2].color;
    v2f_out.color       = u * c1 + v * c2 + w * c0;
    // Les interpolations suivantes surement aussi a changer selon une fonction bien definie
    // qu'on nommera par exemple : interpol_data1, interpol_data2, interpol_data3 et
    // interpol_data4...
    // Par defaut, on fera une interpolation lineaire par rapport aux sommets.
    if ( tcs_in[0].data_comp.x == 1 )
        v2f_out.vdata1 = u * tcs_in[1].vdata1 + v * tcs_in[2].vdata1 + w * tcs_in[0].vdata1;
    if ( tcs_in[0].data_comp.y == 1 )
        v2f_out.vdata2 = u * tcs_in[1].vdata2 + v * tcs_in[2].vdata2 + w * tcs_in[0].vdata2;
    if ( tcs_in[0].data_comp.z == 1 )
        v2f_out.vdata3 = u * tcs_in[1].vdata3 + v * tcs_in[2].vdata3 + w * tcs_in[0].vdata3;
    if ( tcs_in[0].data_comp.w == 1 )
        v2f_out.vdata4 = u * tcs_in[1].vdata4 + v * tcs_in[2].vdata4 + w * tcs_in[0].vdata4;

    // gl_position en repere camera projetee
    gl_Position = gl_ModelViewProjectionMatrix * xyz;
}
