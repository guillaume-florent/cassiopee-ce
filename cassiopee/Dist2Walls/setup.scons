import distutils.sysconfig, os
import KCore.Dist as Dist
from KCore.config import *
#==============================================================================
# Dist2Walls requires:
# C++ compiler
# Numpy
# KCore
#==============================================================================

# Get prefix from command line
prefix = ARGUMENTS.get('prefix', '')
installPath = Dist.getInstallPath(prefix)

# Get compilers from Distutils ================================================
(cc, cxx, opt, basecflags, ccshared, ldshared, so_ext) = Dist.getDistUtilsCompilers()

# Python ======================================================================
(pythonVersion, pythonIncDir, pythonLibDir, pythonLibs) = Dist.checkPython()

# Test if numpy exists =======================================================
(numpyVersion, numpyIncDir, numpyLibDir) = Dist.checkNumpy()

# Test if kcore exists =======================================================
(kcoreVersion, kcoreIncDir, kcoreLibDir) = Dist.checkKCore()

# Setting libraryDirs and libraries ===========================================
libraryDirs = ['..', '.', pythonLibDir, kcoreLibDir]
libraries = ["kcore"]
(ok, libs, paths) = Dist.checkCppLibs([], additionalLibPaths)
libraryDirs += paths; libraries += libs

# Env =========================================================================
import srcs
if Dist.getSystem()[0] == 'mingw': tools = ['mingw']
else: tools = None
AR = Dist.getAR()
env = Environment(tools=tools, CC=cc, CXX=cxx, AR=AR, CCFLAGS=[], CXXFLAGS=[],
                  LIBPATH=additionalLibPaths+libraryDirs,
                  LIBS=libraries+additionalLibs,
                  CPPPATH=["Dist2Walls"]+additionalIncludePaths+[pythonIncDir, numpyIncDir, kcoreIncDir],
                  SHLIBSUFFIX=so_ext, SHLIBPREFIX='',
                  LINKFLAGS=Dist.getLinkArgs(),
                  ENV = {'PATH' : Dist.getenv('PATH'),
                         'LD_LIBRARY_PATH' : Dist.getenv('LD_LIBRARY_PATH'),
                         'LM_LICENSE_FILE': Dist.getenv('LM_LICENSE_FILE')})
env.Replace(CPPFLAGS=Dist.getCppArgs())

#==============================================================================

myMod = env.StaticLibrary('dist2walls',
                          srcs.cpp_srcs)
modDir = installPath+'/Dist2Walls/'
dp1 = env.Install(modDir, myMod)
dp2 = env.Install(modDir, Glob('Dist2Walls/*.py'))

env.Alias(target="install", source=[dp1,dp2])
