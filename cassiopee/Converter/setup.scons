import distutils.sysconfig, os
import KCore.Dist as Dist
from KCore.config import *
#==============================================================================
# Converter requires:
# C++ compiler
# Fortran compiler: defined in config.py
# Numpy
# KCore library
#==============================================================================

# Get prefix from command line
prefix = ARGUMENTS.get('prefix', '')
installPath = Dist.getInstallPath(prefix)

# Get compilers from Distutils ================================================
(cc, cxx, opt, basecflags, ccshared, ldshared, so_ext) = Dist.getDistUtilsCompilers()

# Python ======================================================================
(pythonVersion, pythonIncDir, pythonLibDir, pythonLibs) = Dist.checkPython()

# Test if numpy exists =======================================================
(numpyVersion, numpyIncDir, numpyLibDir) = Dist.checkNumpy()

# Test if kcore exists =======================================================
(kcoreVersion, kcoreIncDir, kcoreLibDir) = Dist.checkKCore()

from KCore.config import *

# Test if libhdf5 exists ======================================================
(hdf, hdfIncDir, hdfLibDir) = Dist.checkHdf(additionalLibPaths,
                                            additionalIncludePaths)

# Test if libpng exists ======================================================
(png, pngIncDir, pngLibDir) = Dist.checkPng(additionalLibPaths,
                                            additionalIncludePaths)

# Test if libmpi exists ======================================================
(mpi, mpiIncDir, mpiLibDir) = Dist.checkMpi(additionalLibPaths,
                                            additionalIncludePaths)
(mpi4py, mpi4pyIncDir, mpi4pyLibDir) = Dist.checkMpi4py(additionalLibPaths,
                                                        additionalIncludePaths)

# Setting libraryDirs and libraries ===========================================
libraryDirs = ['..', '.', pythonLibDir, kcoreLibDir]
includeDirs = [numpyIncDir, kcoreIncDir, pythonIncDir]
libraries = ["kcore"]
if hdf:
    libraryDirs.append(hdfLibDir)
    includeDirs.append(hdfIncDir)
if png:
    libraryDirs.append(pngLibDir)
    includeDirs.append(pngIncDir)
ADDITIONALCPPFLAGS = []
if mpi and mpi4py:
    libraryDirs.append(mpiLibDir)
    includeDirs.append(mpiIncDir)
    includeDirs.append(mpi4pyIncDir)
    ADDITIONALCPPFLAGS = ['-D_MPI']
if hdf: libraries.append('hdf5')
if png: libraries.append('png')
if mpi:
    if Dist.getSystem()[0] == 'mingw':
        libraries.append('msmpi')
    else: 
        libraries.append('mpi')

(ok, libs, paths) = Dist.checkFortranLibs([], additionalLibPaths)
libraryDirs += paths; libraries += libs
(ok, libs, paths) = Dist.checkCppLibs([], additionalLibPaths)
libraryDirs += paths; libraries += libs

# Env =========================================================================
import srcs
if Dist.getSystem()[0] == 'mingw': tools = ['mingw']
else: tools = None; ADDITIONALCPPFLAGS += ['-DUSE_C_REGEX'] # for old gcc < 5.0

AR = Dist.getAR()
env = Environment(tools=tools, CC=cc, CXX=cxx, AR=AR, CPPFLAGS=[],
                  FORTRAN=f77compiler,
                  LIBPATH=additionalLibPaths+libraryDirs,
                  LIBS=libraries+additionalLibs,
                  SHLIBSUFFIX=so_ext, SHLIBPREFIX='',
                  LINKFLAGS=Dist.getLinkArgs(),
                  ENV=Dist.getEnvForScons())
env.Replace(CPPPATH=["Converter"]+additionalIncludePaths+includeDirs)
env.Replace(CXXFLAGS=Dist.getCppArgs()+ADDITIONALCPPFLAGS)
env.Replace(CFLAGS=Dist.getCArgs()+ADDITIONALCPPFLAGS)
env = Dist.createFortranBuilder(env, [kcoreIncDir])
ppf = Dist.createFortranFiles(env, srcs)

#==============================================================================
# Modification pour compiler certains fichiers specifiquement
cppOpts = Dist.getCppArgs()
if Cppcompiler.find('icc') == 0 or Cppcompiler.find('icpc') == 0:
    flags = ''
    for i in cppOpts:
        if i[0:2] != '-O' and i[0:9] != '-fp-model': flags += i+' '
    flags += '-fp-model=strict -O2'
    for i, v in enumerate(srcs.cpp_srcs):
        if v == "Converter/hook.cpp":
            srcs.cpp_srcs[i] = env.Object("Converter/hook.cpp", CXXFLAGS=flags)
        if v == "Converter/identify.cpp": 
            srcs.cpp_srcs[i] = env.Object("Converter/identify.cpp", CXXFLAGS=flags)
        if v == "Converter/nearest.cpp":
            srcs.cpp_srcs[i] = env.Object("Converter/nearest.cpp", CXXFLAGS=flags)
            
myMod = env.StaticLibrary('converter', srcs.cpp_srcs+ppf)
modDir = installPath+'/Converter/'
dp1 = env.Install(modDir, myMod)
dp2 = env.Install(modDir, Glob('Converter/*.py'))
env.Alias(target="install", source=[dp1,dp2])
